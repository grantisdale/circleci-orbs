version: 2.1
description: | 
  DO NOT USE - STILL IN DEV
  Configure and revoke read tokens for packagecloud npm, maven (using gradle) and pypi repositories.This will allow CircleCI 
  jobs to get dependencies from packagecloud. 
  This orb works for npm, maven and pypi packagecloud repositories. To configure npm and pypi repositories you need to set 
  the packagecloud master token; for maven repoistories you will need your packagecloud accounts API token.
  Source: https://github.com/grantisdale/circleci-orbs
commands:
  configure:
    description: Configure read token
    parameters:
      npm-repo:
        type: boolean
        default: false
      maven-gradle-repo:
        type: boolean
        default: false
      pypi-repo:
        type: boolean
        default: false
      username:
        type: string
      reponame: 
        type: string
      mastertoken:
        description: The master token for your packagecloud pypi repository
        type: string
      packagecloudtoken:
        description: Packagecloud API token
        type: string
    steps:
      - when:
          condition: << parameters.npm-repo >>
          steps:
            - run:
                name:  Create npm read token
                command: |
                  if [[ "<< parameters.mastertoken >>" ]]; then
                    curl -s https://<< parameters.mastertoken >>:@packagecloud.io/install/repositories/<< parameters.username >>/<< parameters.reponame >>/script.node.sh | bash
                  else
                    echo "Set packagecloud npm master token argument" 
                  fi  
      - when:
          condition: << parameters.maven-gradle-repo >>
          steps:
            - run:
                name:  Create maven release and snapshot read tokens and set up gradle
                command: |
                  if [[ "<< parameters.packagecloudtoken >>" ]]; then
                    UNIQUE_ID="`hostname -f`-<< parameters.reponame >>"
                    TOKEN_URL=https://<< parameters.packagecloudtoken >>:@packagecloud.io/api/v1/repos/<< parameters.username >>/<< parameters.reponame >>/master_tokens/<< parameters.mastertoken >>/read_tokens.json
                    curl -s -f -X POST -F "read_token[name]=${UNIQUE_ID}" $TOKEN_URL >/tmp/token.json
                    awk '{gsub("[{\"}]+", ""); gsub(",", "\n"); print $0}' /tmp/token.json > ~/token.params
                    mkdir -p ~/.gradle
                    echo "mavenPassword=<< parameters.packagecloudtoken >>" >> ~/.gradle/gradle.properties
                    echo "<< parameters.reponame >>.readtoken=`sed -n 's/value://p' ~/token.params`" >> ~/.gradle/gradle.properties
                    echo "<< parameters.reponame >> << parameters.mastertoken >> `sed -n 's/id://p' ~/token.params`" >> ~/revoke.list
                    cp ~/.gradle/gradle.properties .
                  else
                    echo "Set packagecloud API token argument"
                  fi  
      - when:
          condition: << parameters.pypi-repo >>
          steps:
            - run:
                name: Create pypi read token
                command: |
                  if [[ "<< parameters.mastertoken >>" ]]; then
                    UNIQUE_ID=`hostname -f`
                    export READ_TOKEN=`curl -XPOST --data "name=${UNIQUE_ID}" https://<< parameters.mastertoken >>@packagecloud.io/install/repositories/<< parameters.username >>/<< parameters.reponame >>/tokens.text`
                    echo "export READ_TOKEN=${READ_TOKEN}" >> $BASH_ENV
                  else
                    echo "Set packagecloud pypi master token argument"
                  fi 
  revoke:
    description: |
      Revoke read token(s)
    parameters:
      npm-repo:
        type: boolean
        default: false
      maven-gradle-repo:
        type: boolean
        default: false
      pypi-repo:
        type: boolean
        default: false
      username:
        type: string
      reponame: 
        type: string
      mastertoken:
        description: The master token for your packagecloud pypi repository
        default: ""
        type: string    
      packagecloudtoken:
        description: Packagecloud API token
        default: ""
        type: string
    steps:
      - when:
          condition: << parameters.npm-repo >>
          steps:
            - run:
                name: revoke npm read token
                command: |
                  # Set sudo to work whether logged in as root user or non-root user
                  if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
                  $SUDO apt-get install ruby-full
                  $SUDO rm -rf /var/lib/apt/lists/*
                  $SUDO gem install rake
                  $SUDO gem install package_cloud

                  export PACKAGECLOUD_TOKEN=<< parameters.packagecloudtoken >>
                  package_cloud read_token destroy << parameters.username >>/<< parameters.reponame >> default/`hostname -f`
      - when:
          condition: << parameters.maven-gradle-repo >>
          steps:
            - run:
                name: revoke maven-gradle read tokens
                command: |
                  while read revoke_entry; do
                    set $revoke_entry
                    REPO=$1
                    TOKEN=$2
                    ID=$3
                    curl -s -f -X DELETE https://<< parameters.packagecloudtoken >>:@packagecloud.io/api/v1/repos/<< parameters.username >>/${REPO}/master_tokens/${TOKEN}/read_tokens/${ID}
                  done < ~/revoke.list
      - when:
          condition: << parameters.pypi-repo >>
          steps:
            - run:
                name: revoke pypi read token
                command: |
                  # Set sudo to work whether logged in as root user or non-root user
                  if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
                  $SUDO rm -rf /var/lib/apt/lists/*

                  $SUDO apt-get install ruby-full
                  $SUDO gem install rake
                  $SUDO gem install package_cloud
                  export PACKAGECLOUD_TOKEN=<< parameters.packagecloudtoken >>
                  package_cloud read_token destroy < parameters.username >>/<< parameters.reponame >> default/`hostname -f`